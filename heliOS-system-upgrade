#! /usr/bin/env python3
#
"""
   HeliOS-system-upgrade

   This the script called by the Utility Menu to invoke a system upgrade from a
   HeliOS update disc.

"""
# -----------------------------------------------------------------------------------
#
#          .-9 9 `\
#        =(:(::)=  ;
#          ||||     \
#          ||||      `-.
#         ,\|\|         `,
#        /                \
#       ;                  `'---.,
#       |                         `\
#       ;                     /     |
#       \                    |      /
#        )           \  __,.--\    /
#     .-' \,..._\     \`   .-'  .-'
#    `-=``      `:    |   /-/-/`
#                 `.__/
#   ____  _  _  ____
#  (_  _)/ )( \(  __)
#    )(  ) __ ( ) _)
#   (__) \_)(_/(____)
#   ____   __   ____  ____  ____  ____  __    __  ____  _  _
#  / ___) /  \ (  _ \(  __)(  _ \(_  _)/  \  /  \(_  _)/ )( \
#  \___ \/  ^ \ ) _ ( ) _)  )   /  )( (  O )(  O ) )(  ) __ (
#  (____/\_/\_/(____/(____)(__\_) (__) \__/  \__/ (__) \_)(_/
#   ____  ____   __   __
#  / ___)(  __) /  \ (  )
#  \___ \ ) _) /  ^ \/ (_/\
#  (____/(____)\_/\_/\____/
#
# -----------------------------------------------------------------------------------

import re, sh, os, io, shutil, pwd, sys, stat
import tarfile, subprocess, helios_common
from glob import glob
from shutil import move
from psutil import disk_partitions
from time import sleep

APT_DIR = '/etc/apt'
APT_EXTRAS_DIR = '/etc/apt/sources.list.d/'
APT_OFFLINE_DIR = '/etc/apt/offline.d/'
APT_SOURCES_ONLINE = '/etc/apt/sources.list'
APT_SOURCES_OFFLINE = '/etc/apt/offline.d/sources.list'

BASE_UPDATE_DIR = '/usr/local/share/HeliOS-Update'
POST_INSTALL_DIR = '/usr/local/share/HeliOS-Post-Install'
STAGING = os.path.join( BASE_UPDATE_DIR, 'staging' )

# ===================================================================================================

def ClearStaging( f=None ):
    try:
        sh.rm( '-rf', STAGING + r'/*' )
    except:
        if f is not None:
            helios_common.Warning( 'Unable to clear the staging area for {}'.format( f ), 'Error:' )
        else:
            helios_common.Warning( 'Unable to clear the staging area for the local update', 'Error:' )

# ===================================================================================================

def FinishLocalUpdate( update_file=None ):
    target_file = None
    install_file = None
    target_dir = None
    update_dir = None

    for f in glob( os.path.join( STAGING, r'TARGET*' ) ):
        if os.path.isfile( f ):
            target_file = f
            break

    if target_file is None:
        # This is either a malformed update, or it is a direct-to-bin update that doesn't use this mechanism...
        msg = "No update target file information found for \"{}\"".format( update_file )
        helios_common.Warning( msg, "Notice:" )
        return

    # Continue here if this is a "regular" update than has a target directory file (e.g. TARGET.20170120_12)...

    try:
        with open( os.path.join( STAGING, target_file ) ) as fh:
            target_dir = fh.read().replace('\n', '')
        update_dir = os.path.join(BASE_UPDATE_DIR, target_dir)
    except Exception as e:
        msg = "Malformed update -- can't get target directory for {}:\n{}".format( update_file, repr(e) )
        helios_common.Warning( msg, "ABEND:" )
        return

    os.mkdir( update_dir )
    for f in os.listdir( STAGING ):
        src = os.path.join( STAGING, f )
        dst = os.path.join( update_dir, f )
        move( src, dst )

    for f in glob( os.path.join( update_dir, r'INSTALL*' ) ):
        if os.path.isfile( f ):
            install_file = f
            break

    if os.path.isfile( install_file ):
        try:
            with open( install_file ) as fh:
                install_code = fh.read()

            compile( install_code, install_file, 'exec' )
            os.chdir( update_dir )
            exec( install_code )

            msg = "HeliOS update applied successfully"
            helios_common.SendNotice( msg )
            msg = msg + ".\nA restart of the Utility Menu or reboot of the system"
            msg = msg + "\nmay be required for changes to be fully applied."
            helios_common.Warning( msg, "OK:" )
        except Exception as e:
            msg = "Unable to complete update\n" + repr(e)
            helios_common.Warning( msg, "ABEND:" )
    else:
        msg = "No post-install script was found -- update may not be complete"
        helios_common.Warning( msg, "helios_common.Warning:" )

# ===================================================================================================

def DoTheUpgrade():

    mount = helios_common.UpdateMounted()
    if mount is None:
        helios_common.Warning( "A HeliOS Update disc/image must be mounted in the CD-Rom drive...", "ABEND:" )
        helios_common.Die( "No mount-point for a HeliOS update disc was found" )

    try_upgrade, msg, bubble = helios_common.AptSourceReplace( mount )
    try_local_update = False

    if try_upgrade:
        try_local_update = True
        try:
            sh.apt_get( "update", _fg=True )
            try:
                sh.apt_get( "upgrade", "--allow-unauthenticated", _fg=True )
            except Exception as e:
                msg = "Unable to execute APT upgrade: " + repr(e)
                helios_common.Warning( msg, "ABEND:" )
                helios_common.SendError( msg )
                try_local_update = False
        except Exception as e:
            msg = "Unable to execute APT update: " + repr(e)
            helios_common.Warning( msg, "ABEND:" )
            helios_common.SendError( msg )
            try_local_update = False
    else:
        helios_common.Warning( msg, bubble )
        helios_common.SendError( msg, bubble )

    if try_local_update:
        try:
            p1 = subprocess.Popen( [ 'apt-cache', 'search', 'helios-update' ], stdout=subprocess.PIPE, universal_newlines=True )
            p2 = subprocess.Popen( [ 'cut', '-f1', '-d ' ], stdin=p1.stdout, stdout=subprocess.PIPE, universal_newlines=True )
            p1.stdout.close()
            output = p2.communicate()[0]
            pkgs = sorted( output.splitlines() )
            if len(pkgs) > 0:
                try:
                    for f in pkgs:
                        sh.apt_get( "install", f, "--allow-unauthenticated", "--reinstall", _fg=True )
                        FinishLocalUpdate(f)
                except Exception as e:
                    msg = "APT-install of \"helios-update*.deb\" package failed: " + repr(e)
                    helios_common.Warning( msg, "ABEND:" )
                    helios_common.SendError( msg )
            else:
                msg = 'No helios-update package was found in the APTonCD repository...'
                helios_common.Warning( msg, "Notice:" )
                helios_common.SendNotice( msg, "Notice:" )
        except Exception as e:
            msg = "Error while testing for a \"helios-update.deb\" package in the APTonCD repo: " + repr(e)
            helios_common.Warning( msg, "Notice:" )
            helios_common.SendNotice( msg )

    ok, msg, lead = helios_common.AptSourceRestore()
    helios_common.SendNotice( msg, lead )
    helios_common.Warning( msg, lead )

# ===================================================================================================

if __name__ == '__main__':

    if os.geteuid() != 0:
        helios_common.Warning( "Elevated privileges required..." )
        helios_common.SendError( "HeliOS upgrade script aborted -- sudo not provided" )
    else:
        DoTheUpgrade()
